"""
Main drive script for training etas and running baselines
for all experiments. Iterates over all relevant paper 
configurations (random seeds) and saves to `config.json`, 
then runs the python script version of all the jupyter notebooks.
These python scripts are auto-generated using the Makefile in the
root directory.
"""

import os
import json

from shared import run_file


BASE_DIR = ".."
CONFIG_PATH = "config.json"

# the experiment to run
EXPERIMENT = "cifar10"  # ["adult", "adult_bb", "adult_periodic", "cifar10", "adience", "adience_ablation"]
# the random seeds to run
RANDOM_SEEDS = [15, 25, 35, 45, 55]

# should be in `src/py` folder, which is generated by Makefile
EXPERIMENT_TO_FILE_ORDER = {
    "adult": [
        "process.py",
        "train.py",
        "run_baselines.py",
        "evaluate_baselines.py",
        "fweg.py",
        "non_model_baselines.py",
    ],
    "adult_bb": [
        "process.py",
        "train.py",
        "run_baselines.py",
        "evaluate_baselines.py",
        "fweg.py",
    ],
    "adult_periodic": [
        "process.py",
        "train.py",
        "run_periodic.py",
    ],
    "cifar10": [
        "process.py",
        "train.py",
        "run_baselines.py",
        "evaluate_baselines.py",
        "fweg.py",
        "non_model_baselines.py",
    ],
    "adience": [
        "process.py",
        "train.py",
        "feature_extract.py",
        "run_baselines.py",
        "evaluate_baselines.py",
        "fweg.py",
        "non_model_baselines.py",
    ],
    "adience_ablation": [
        "setup.py",
        "run_baselines.py",
        "evaluate_baselines.py",
        "fweg.py",
    ],
}

# this is a little complex so please read it carefully to understand
# how it works. this dictionary decides what configs to run each experiment with
# default means change nothing on existing config.json
EXPERIMENT_TO_CONFIG = {
    "adult": "default",
    "adult_bb": "default",
    "adult_periodic": "default",
    "cifar10": "default",
    "adience": "default",
    "adience_ablation": {
        # val_full_split field in config.json will be modified
        "field": "val_full_split",
        "configs": [
            # all the val splits to run
            0.01,
            0.025,
            0.05,
            0.075,
            0.1,
            0.15,
            0.2,
            0.3,
            0.4,
            0.5,
        ],
        "on": [
            "setup.py",
            "run_baselines.py",
            "evaluate_baselines.py",
            "fweg.py",
        ],
    },
}


if __name__ == "__main__":
    print("Running main drive script...")
    print(
        "Warning, this can take several hours to run the processing/training/baselines/FWEG for all the random seeds..."
    )

    for rs in RANDOM_SEEDS:
        # save the config parameters
        config_fp = open(CONFIG_PATH, "r")
        config = json.load(config_fp)
        config_fp.close()
        config["random_seed"] = rs  # save this experiment's random seed
        config_fp = open(CONFIG_PATH, "w")
        json.dump(config, config_fp, indent=4)
        config_fp.close()

        for f in EXPERIMENT_TO_FILE_ORDER[EXPERIMENT]:
            if EXPERIMENT_TO_CONFIG[EXPERIMENT] == "default":
                # just run the file
                run_file(EXPERIMENT, f)
                continue

            # we have some custom configurations
            special_files = EXPERIMENT_TO_CONFIG[EXPERIMENT]["on"]
            if f not in special_files:
                # we have custom configs, but they are to be ignored on the current file
                run_file(EXPERIMENT, f)
            else:
                # we have some custom configs to iterate over
                field = EXPERIMENT_TO_CONFIG[EXPERIMENT]["field"]
                options = EXPERIMENT_TO_CONFIG[EXPERIMENT]["configs"]
                for opt in options:
                    # save the config parameters
                    config_fp = open(CONFIG_PATH, "r")
                    config = json.load(config_fp)
                    config_fp.close()
                    config["experiment_configs"][EXPERIMENT][field] = opt
                    config_fp = open(CONFIG_PATH, "w")
                    json.dump(config, config_fp, indent=4)
                    config_fp.close()
                    run_file(EXPERIMENT, f)
